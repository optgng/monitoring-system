import { dashboardApi } from '@/lib/dashboard-api';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤
function logApiOperation(operation: string, request?: any, response?: any, error?: any) {
  console.log(`\n---- ${operation} ----`);
  if (request) console.log('–ó–∞–ø—Ä–æ—Å:', JSON.stringify(request, null, 2));
  if (response) console.log('–û—Ç–≤–µ—Ç:', JSON.stringify(response, null, 2));
  if (error) console.error('–û—à–∏–±–∫–∞:', error);
  console.log('-'.repeat(operation.length + 10));
}

async function testDashboardsAPI() {
  try {
    // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è (health check)
    console.log("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å API...");
    try {
      const response = await fetch('http://localhost:8050/healthz');
      const health = await response.json();
      console.log("‚úÖ API –¥–æ—Å—Ç—É–ø–Ω–æ:", health.status === 'healthy');
      console.log("–î–∞–Ω–Ω—ã–µ:", health);
    } catch (error) {
      console.error("‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ:", error);
      return;
    }

    // 2. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –¥–∞—à–±–æ—Ä–¥–∞
    console.log("\nüèóÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –¥–∞—à–±–æ—Ä–¥–∞...");

    const dashboardData = {
      dashboard: {
        title: "Test Dashboard " + new Date().toISOString(),
        description: "Test dashboard created by integration test",
        tags: ["test", "integration"],
        style: "dark",
        timezone: "browser",
        editable: true,
        hideControls: false,
        graphTooltip: 1,
        time: {
          from: "now-1h",
          to: "now"
        },
        timepicker: {
          refresh_intervals: ["5s", "10s", "30s", "1m", "5m", "15m", "30m", "1h", "2h", "1d"],
          time_options: ["5m", "15m", "1h", "6h", "12h", "24h", "2d", "7d", "30d"]
        },
        templating: {
          list: []
        },
        annotations: {
          list: []
        },
        refresh: "30s",
        schemaVersion: 36,
        version: 0,
        panels: [],
        links: [],
        fiscalYearStartMonth: 0,
        liveNow: false,
        weekStart: ""
      },
      folderId: 0,
      overwrite: false
    };

    try {
      const response = await fetch('http://localhost:8050/api/', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(dashboardData)
      });

      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${await response.text()}`);
      }

      const result = await response.json();
      logApiOperation("–°–æ–∑–¥–∞–Ω–∏–µ –¥–∞—à–±–æ—Ä–¥–∞", dashboardData, result);

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º UID –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
      const dashboardUid = result.uid;

      if (!dashboardUid) {
        throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å UID –¥–∞—à–±–æ—Ä–¥–∞");
      }

      console.log("‚úÖ –î–∞—à–±–æ—Ä–¥ —Å–æ–∑–¥–∞–Ω. UID:", dashboardUid);

      // 3. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
      console.log("\nüß© –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏...");

      const panelData = {
        title: "CPU Usage",
        type: "stat",
        datasource: {
          type: "prometheus",
          uid: "prometheus"
        },
        targets: [
          {
            refId: "A",
            expr: "100 - (avg by (instance) (rate(node_cpu_seconds_total{mode=\"idle\"}[5m])) * 100)",
            legendFormat: "CPU Usage %",
            datasource: {
              type: "prometheus",
              uid: "prometheus"
            }
          }
        ],
        gridPos: {
          h: 8,
          w: 12,
          x: 0,
          y: 0
        }
      };

      try {
        const panelResponse = await fetch(`http://localhost:8050/api/${dashboardUid}/panels`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(panelData)
        });

        if (!panelResponse.ok) {
          throw new Error(`HTTP ${panelResponse.status}: ${await panelResponse.text()}`);
        }

        const panelResult = await panelResponse.json();
        logApiOperation("–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏", panelData, panelResult);

        console.log("‚úÖ –ü–∞–Ω–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω–∞. ID:", panelResult.id);

        // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –¥–∞—à–±–æ—Ä–¥–∞
        console.log("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –¥–∞—à–±–æ—Ä–¥–∞...");

        try {
          const getDashboardResponse = await fetch(`http://localhost:8050/api/${dashboardUid}`);
          const getDashboardResult = await getDashboardResponse.json();

          // –í—ã–≤–æ–¥–∏–º —Ç–æ–ª—å–∫–æ –∫—Ä–∞—Ç–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
          console.log("‚úÖ –î–∞—à–±–æ—Ä–¥ –ø–æ–ª—É—á–µ–Ω:");
          console.log("- –ù–∞–∑–≤–∞–Ω–∏–µ:", getDashboardResult.dashboard?.title);
          console.log("- –ö–æ–ª-–≤–æ –ø–∞–Ω–µ–ª–µ–π:", getDashboardResult.dashboard?.panels?.length || 0);
          console.log("- URL:", getDashboardResult.meta?.url);

          console.log("\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!");
          console.log(`–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–∞—à–±–æ—Ä–¥–∞: http://localhost:3001${getDashboardResult.meta?.url}`);

        } catch (error) {
          console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞—à–±–æ—Ä–¥–∞:", error);
        }

      } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–∞–Ω–µ–ª–∏:", error);
      }

    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–∞—à–±–æ—Ä–¥–∞:", error);
    }

  } catch (error) {
    console.error("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ–±—â–∞—è –æ—à–∏–±–∫–∞:", error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testDashboardsAPI();

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏–∑ –∫–æ–Ω—Å–æ–ª–∏
export { testDashboardsAPI };
